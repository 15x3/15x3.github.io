<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Obsidian + Hexo + Github 最佳实践</title>
    <link href="/2025/04/24/Obsidian%20+%20Hexo%20+%20Github%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/04/24/Obsidian%20+%20Hexo%20+%20Github%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-部署"><a href="#Hexo-部署" class="headerlink" title="Hexo 部署"></a>Hexo 部署</h2><p>需要预先准备好<code>Node js</code> 和 <code>Git</code></p><p>对于这两个东西的安装，可以参考Hexo官网的步骤：  </p><p><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Git">Git的安装</a><br><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Node-js">Node.js的安装</a></p><h3 id="安装-Hexo-并本地启动测试"><a href="#安装-Hexo-并本地启动测试" class="headerlink" title="安装 Hexo 并本地启动测试"></a>安装 Hexo 并本地启动测试</h3><p>导航至准备部署博客的文件夹内，打开Powershell或其他命令行终端，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install -g hexo-cli <span class="hljs-comment"># 全局安装  </span><br>  <br>hexo -v <span class="hljs-comment"># 查看hexo版本</span><br></code></pre></td></tr></table></figure><p>开始创建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo init blog <span class="hljs-comment"># init后面的内容就是博客文件夹的名字，我这里以“blog”为例 </span><br>  <br><span class="hljs-built_in">cd</span> blog<br>  <br>npm install<br></code></pre></td></tr></table></figure><p>生成网页文件后本地启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo g <span class="hljs-comment"># generate 生成界面  </span><br><br>hexo s <span class="hljs-comment"># server 本地启动网站</span><br></code></pre></td></tr></table></figure><p>浏览器访问命令行中提示的网站<a href="http://localhost:4000/">http://localhost:4000/</a>可以看到在本机的4000端口Hexo已经生成了一个示例网站了。</p><p>测试完毕后记得在命令行 <code>Ctrl + C</code> 关闭本地启动</p><h2 id="配置Github一键部署"><a href="#配置Github一键部署" class="headerlink" title="配置Github一键部署"></a>配置Github一键部署</h2><p>目前，Hexo已有 <code>hexo-deployer-git</code> 这个现成轮子供我们一键部署。先在Blog文件夹内执行以下代码安装好它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>hexo-deployer-git能够执行三个步骤：</p><ol><li><p><strong>生成静态文件</strong>：自动执行 <code>hexo generate</code> 命令，将你的Markdown文章转换为静态HTML文件</p></li><li><p><strong>部署到远程</strong>：将生成的静态文件推送到你配置的Git远程仓库</p></li><li><p><strong>初始化Github Actions</strong>：生成静态文件同时生成Github Actions脚本，实现此后哦每次推送自动构建和部署。</p></li></ol><h3 id="配置部署信息"><a href="#配置部署信息" class="headerlink" title="配置部署信息"></a>配置部署信息</h3><p>安装完成后，还需要在博客根目录的 <code>_config.yml</code> 文件中添加部署配置，才能开始享受一键部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;你的仓库地址&gt;</span>  <span class="hljs-comment"># 例如 git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span>  <span class="hljs-comment"># 或 master，取决于你的仓库默认分支</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;Site updated: <span class="hljs-template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span>  <span class="hljs-comment"># 可选的提交信息</span><br></code></pre></td></tr></table></figure><p>完成配置后，可使用以下命令进行部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>或者简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo d -g<br></code></pre></td></tr></table></figure><h3 id="Obsidian配置"><a href="#Obsidian配置" class="headerlink" title="Obsidian配置"></a>Obsidian配置</h3><p>将blog文件夹作为新仓库打开，一般会在Obsidian当中找到以下文件</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424193149117.png"><br>为确保能构建一条从新建到部署高度自动化的工作流，Obsidian端需要安装以下插件：</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424193423850.png" alt="image.png"><br>第一个主要用于方便将图片一键CV完成 <code>上传至图床并返回对应图片链接</code> 的流程，如何配置会在后文提到，如果没有这方面需求可以先不装。</p><p>安装好后打开设置，在<code>Shell Commands</code>的设置里添加上我们之前准备好的一键部署命令：</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424193758770.png" alt="image.png"><br>这样一来，之后写好博客文后不再需要跳转至外部链接进行操作，可以直接在Obsidian<code>Ctrl + P</code>呼出快捷键执行该指令</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424193931956.png" alt="image.png"></p><p>Hexo博客的md文件都有YAML文件头以方便解析，在Obsidian当中以<code>笔记属性</code>显示</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424194728774.png" alt="image.png"></p><p>通常，在文件夹当中启动终端，然后输入<code>hexo new post &quot;此处输入博客主题&quot;</code>，生成的md文件就会附带对应的属性，但是我希望能把这一步操作直接放进Obsidian当中，一旦构建好环境就能写完就发，不用再去操作其他软件。</p><p>这里就需要用到Linter插件，Linter可以在保存时<code>Ctrl + S</code>时自动添加设置好的YAML头，</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424200501905.png" alt="image.png"></p><p>这里以默认的Hexo主题为例，默认Hexo主题有三个属性内容：<code>date</code> <code>title</code> <code>tags</code>，其中<code>date</code>遵循 <code>YYYY-MM-DD hh:mm:ss</code>的格式</p><p>打开Linter的设置，找到<code>插入YAML属性</code>，打开<code>指定 YAML 键插入到 YAML Front-matter 中</code>，并在<code>要插入的键</code>中输入<code>tags:</code>（date和title先不在这里输入，当然在这里先加上应该无伤大雅）<br><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424200751801.png" alt="image.png"></p><p><code>tags</code>的内容通常自己手动输入就行，不过<code>date</code>和<code>title</code>可以自动生成：</p><p><code>date</code>的生成：</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424201135358.png" alt="image.png"><br>你可以选择插入文件创建日期或者修改日期，我选择了修改日期，就是需要注意将日期修改为固定格式，防止Hexo解析时出现意外</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424201232352.png" alt="image.png"></p><p><code>title</code>的自动输入可以通过启用<code>YAML标题</code>来实现：<br><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424201255341.png" alt="image.png"></p><h2 id="工作流："><a href="#工作流：" class="headerlink" title="工作流："></a>工作流：</h2><p>试试用CV插入图片</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250424201932406.png" alt="image.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>最佳实践</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建博客笔记</title>
    <link href="/2025/04/21/%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/04/21/%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="让我们测试更多东西"><a href="#让我们测试更多东西" class="headerlink" title="让我们测试更多东西"></a>让我们测试更多东西</h4><p>终于——轮到我来建立博客了，想想还有点小激动</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的搭建方案主要集中在用户友好性上——一旦配置好，可以一键将复制的图片上传至图床并返回标签、一键部署至博客</p><h2 id="搭建方案"><a href="#搭建方案" class="headerlink" title="搭建方案"></a>搭建方案</h2><p>参考了主流的Hexo + Github Pages + Obsidian框架，为了确保Obsidian流利插入图片，额外使用了Obsidian + PicList + 腾讯云OBS图床 ，另外为了确保手机端同步，还在安卓平台准备了Obsidian + Git,hello</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>事先准备好了一个Obsidian项目，在项目根目录下打开终端</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install -g hexo-cli <span class="hljs-comment"># 全局安装  </span><br>  <br>hexo -v <span class="hljs-comment"># 查看hexo版本</span><br></code></pre></td></tr></table></figure><p>开始创建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo init blog  <br>  <br><span class="hljs-built_in">cd</span> blog  <br>  <br>npm install<br></code></pre></td></tr></table></figure><p>生成网页文件后本地启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo g <span class="hljs-comment"># generate 生成界面  </span><br>hexo s <span class="hljs-comment"># server 本地启动网站</span><br></code></pre></td></tr></table></figure><p>浏览器访问命令行中提示的网站<a href="http://localhost:4000/">http://localhost:4000/</a>可以看到在本机的4000端口Hexo已经生成了一个示例网站了。</p><h3 id="配置GitHub-Pages"><a href="#配置GitHub-Pages" class="headerlink" title="配置GitHub Pages"></a>配置GitHub Pages</h3><p>和上来就更换主题不同，我倾向于先跑通架构再开始修缮</p><p>默认你有一个 GitHub 账号，创建一个仓库</p><p>在Github中注册账号，然后创建一个仓库，配置Github Pages：创建仓库的时候，仓库名请务必填 <code>&lt;你的github名&gt;.github.io</code> ，不然的话Github不会将该仓库认作Github Pages。（别取blog.github.io一定要GitHub名）<br>在 <code>&lt;你的github名&gt;.github.io</code> 仓库对应的 GitHub Pages 设置页面 (访问路径为 <code>Settings -&gt; Pages</code> ) 可以找到个人博客的主页访问地址：https:&#x2F;&#x2F;&lt;GitHub 用户名&gt;.github.io。</p><p>回到hexo这边，首先安装 <code>hexo-deployer-git</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>修改 <code>_config.yml</code> 文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">deploy:</span>  <br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span> <span class="hljs-comment"># https://github.com/&lt;GitHub用户名&gt;/&lt;GitHub用户名&gt;.github.io.git  </span><br><span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>] <span class="hljs-comment"># 可选？一般都是main  </span><br><span class="hljs-attr">token:</span> [<span class="hljs-string">token</span>] <span class="hljs-comment"># 可选？</span><br></code></pre></td></tr></table></figure><p>配置好了之后可以就可以在终端生成站点文件后推送到这个仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo clean<br>hexo deploy<br></code></pre></td></tr></table></figure><p>如果仓库名为<code>&lt;你的github名&gt;.github.io</code>，一旦上传后几分钟内，Github Pages会自动部署，可以去仓库setting里跳转到Pages一栏确认。通常过5分钟就可以使用了</p><p>如果没有部署成功，可参考：<a href="https://docs.github.com/en/pages/quickstart">Quickstart for GitHub Pages - GitHub Docs</a></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p><a href="https://hexo.io/themes/">所有的主题可以在这里找到</a></p><p>我先使用了主流的Fluid，之后打算自己弄一个自创主题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>安装完成后，打开<code>_config.yml</code>，修改文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span> <span class="hljs-comment"># landscape</span><br></code></pre></td></tr></table></figure><p>当执行完上述操作之后，完成了主题的配置，可以执行下述指令，查看效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo clean <span class="hljs-comment"># 清除  </span><br>hexo g <span class="hljs-comment"># 生成  </span><br>hexo s <span class="hljs-comment"># 本地启动</span><br></code></pre></td></tr></table></figure><p>确认启动完成后，就可以在终端生成站点文件后再次推送，确认网上是否有改变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs BASH">hexo clean<br>hexo deploy<br></code></pre></td></tr></table></figure><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><p>关于图片插入上，我用的是 PicList + 腾讯云OBS 图床的方案，实现了截图后一键CtrlV就能完成 “ 上传图床 -&gt; 获取图床链接 -&gt; 改为Obsidian格式并黏贴 ”，大致操作如下：</p><h1 id="一键推送"><a href="#一键推送" class="headerlink" title="一键推送"></a>一键推送</h1><p>在<a href="https://sagi-rastar.github.io/2023/11/10/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8obsidian%E5%8A%A0hexo%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/#3-1-1-3-%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98">关于我使用obsidian加hexo部署个人博客的过程 - SagiRastar’s Blog</a>博客当中，配置完后每次更新需要部署以下工作流</p><p>我非常不喜欢机械重复的工作，最好是能够通过GitHub自动推送</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250421171115104.png" alt="image.png"></p><p>在尝试了几个方案后，我最后使用了obsidian的shellcommands插件作为替代</p><p>在第三方市场中寻找Shell Commands插件安装并启动，</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250423104610840.png" alt="image.png"></p><p>在<code>设置-Shell Commands</code>文件夹中新增<code>hexo clean &amp;&amp; hexo deploy</code>命令</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250423104626020.png" alt="image.png"></p><p>之后需要发布博客时，不再需要切出界面，全部都可以再obsidian当中完成。写好之后的博客，都加上<code>publish = true</code>属性，拖到<code>source/_posts</code>文件夹下</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250423104405570.png" alt="image.png"></p><p>之后<code>ctrl + p</code>，执行命令，就完成了一键拖动+部署，推动到GitHub上后，由hexo deploy指令自动触发Github actions</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250423104828927.png" alt="image.png"></p><p>这还没完，我不是很喜欢在obsidian当中出现和文档记录无关的东西，最好能找个办法把<code>node_modules</code>之类的文件夹都隐藏掉，所幸ob有这样的插件</p><p><img src="https://obsidian-figbed-1257930702.cos.ap-guangzhou.myqcloud.com/20250423105306520.png" alt="image.png"></p><p>使用Hide Folders可以隐藏掉在文档当中不必要出现的文件夹</p><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><p>draft -&gt; <code>source/_posts</code> -&gt; </p><p>由于我对于博客笔记的侧边栏有点强迫症，所以希望右边的栏里面不要出现所有和hexo结构相关的东西（最好是放到一个文件夹内）</p><p>一开始，我尝试着将所有的东西都在一个文件夹内，结果发现自己调不清楚git和部署，</p><p>后来我尝试了一下从obsidian方面入手，发现了hide flower这个插件</p><p>and it works! 我的博客环境和hexo环境分隔开来了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/21/hello-world/"/>
    <url>/2025/04/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
